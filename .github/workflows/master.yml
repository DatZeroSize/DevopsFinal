name: DevopsFinal Actions

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  IMAGE_TAG: ${{ github.sha }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: devops-cluster
  ECS_SERVICE: devopsfinal-task-service-qswqd4rl

jobs:
  # test-and-sonarqube:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0  # Cần thiết để SonarCloud phân tích lịch sử Git

  #     - name: Setup .NET
  #       uses: actions/setup-dotnet@v3
  #       with:
  #         dotnet-version: ${{ secrets.DOTNET_VERSION }}

  #     - name: Restore dependencies
  #       run: dotnet restore

  #     - name: Build project
  #       run: dotnet build --no-restore --configuration Release

  #     - name: Run tests
  #       run: |
  #         dotnet test DevopsFinal.Tests/DevopsFinal.Tests.csproj \
  #           --configuration Release \
  #           --verbosity normal \
  #           --no-build
  #         if [ $? -ne 0 ]; then
  #           echo "Tests failed, exiting..."
  #           exit 1
  #         fi

  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarcloud-github-action@master
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         args: >
  #           -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
  #           -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
  #           -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
  #           -Dsonar.exclusions=**/wwwroot/**,**/obj/**,**/bin/**,**/Program.cs,**/Models/ErrorViewModel.cs
  #           -Dsonar.coverage.exclusions=**/wwwroot/**,**/obj/**,**/bin/**,**/Program.cs,**/Models/ErrorViewModel.cs
  #           -Dsonar.qualitygate.wait=true  # Dừng nếu Quality Gate thất bại
  #       if: success()  # Chỉ chạy nếu bước trước thành công

  build-and-push-docker:
    # needs: test-and-sonarqube
    # if: success()  # Chỉ chạy nếu job test-and-sonarqube thành công
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create .env file for Docker build
        run: |
          if [ -z "${{ secrets.ASPNETCORE_ENVIRONMENT }}" ] || [ -z "${{ secrets.CONNECTION_STRINGS_DEFAULT }}" ]; then
            echo "Error: ASPNETCORE_ENVIRONMENT or CONNECTION_STRINGS_DEFAULT is not set in GitHub Secrets"
            exit 1
          fi
          echo "ASPNETCORE_ENVIRONMENT=${{ secrets.ASPNETCORE_ENVIRONMENT }}" > .env
          echo "ConnectionStrings__DefaultConnectionString=${{ secrets.CONNECTION_STRINGS_DEFAULT }}" >> .env
          cat .env

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Remove .env file
        if: always()
        run: rm -f .env
  deploy:
    needs: build-and-push-docker
    if: success()  # Chỉ chạy nếu job build-and-push-docker thành công
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update ECS service
        id: update-service
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
          DEPLOYMENT_ID=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].deployments[0].id' --output text)
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
          echo "Updated deployment ID: $DEPLOYMENT_ID"

      - name: Wait for deployment and task to stabilize
        timeout-minutes: 45  # Tăng thời gian tối đa lên 45 phút
        run: |
          MAX_ATTEMPTS=90  # 90 lần kiểm tra, mỗi lần cách nhau 30 giây = 45 phút
          for ((i=1; i<=MAX_ATTEMPTS; i++)); do
            echo "Attempt $i/$MAX_ATTEMPTS: Checking deployment and task status..."
            # Lấy thông tin dịch vụ
            SERVICE_STATUS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].status' --output text)
            DEPLOYMENT_STATE=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].deployments[0].status' --output text)
            # Lấy task ARN của triển khai mới nhất
            TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER --service-name $ECS_SERVICE --query 'taskArns[0]' --output text)
            if [ -n "$TASK_ARN" ]; then
              TASK_STATUS=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $TASK_ARN --query 'tasks[0].lastStatus' --output text)
              TASK_DETAILS=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $TASK_ARN --query 'tasks[0].containers[0].healthStatus' --output text 2>/dev/null || echo "N/A")
              # Kiểm tra trạng thái thất bại
              if [ "$TASK_STATUS" == "FAILED" ] || [ "$TASK_STATUS" == "STOPPED" ]; then
                echo "Task failed with status: $TASK_STATUS. Checking logs and events..."
                LOG_STREAM=$(aws logs describe-log-streams --log-group-name /ecs/$ECS_SERVICE --query 'logStreams[0].logStreamName' --output text --no-cli-pager 2>/dev/null || echo "")
                if [ -n "$LOG_STREAM" ]; then
                  aws logs get-log-events --log-group-name /ecs/$ECS_SERVICE --log-stream-name $LOG_STREAM --output text --no-cli-pager
                else
                  echo "No log stream found. Check ECS task definition for logging configuration."
                fi
                aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $TASK_ARN --query 'tasks[0].containers[0].reason' --output text
                aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].events[0:5]' --output text
                exit 1
              fi
            else
              TASK_STATUS="PENDING"
              TASK_DETAILS="N/A"
            fi
            # In trạng thái chi tiết
            echo "Current Status - Service: $SERVICE_STATUS, Deployment: $DEPLOYMENT_STATE, Task: $TASK_STATUS, Health: $TASK_DETAILS"
            # Kiểm tra điều kiện thành công
            if [ "$SERVICE_STATUS" == "ACTIVE" ] && [ "$DEPLOYMENT_STATE" == "PRIMARY" ] && [ "$TASK_STATUS" == "RUNNING" ]; then
              echo "Deployment and task stabilized successfully!"
              break
            fi
            aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].events[0:5]' --output text
            if [ $i -eq $MAX_ATTEMPTS ]; then
              echo "Deployment or task did not stabilize within $((MAX_ATTEMPTS * 30)) seconds. Failing..."
              exit 1
            fi
            sleep 30
          done

      - name: Verify task details
        if: success()  # Chỉ chạy nếu bước trước thành công
        run: |
          TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER --service-name $ECS_SERVICE --desired-status RUNNING --query 'taskArns[0]' --output text)
          if [ -z "$TASK_ARN" ]; then
            echo "No running tasks found for service $ECS_SERVICE"
            aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].events[0:5]' --output text
            exit 1
          fi
          TASK_STATUS=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $TASK_ARN --query 'tasks[0].lastStatus' --output text)
          TASK_DETAILS=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $TASK_ARN --query 'tasks[0].containers[0].healthStatus' --output text 2>/dev/null || echo "N/A")
          echo "Final Status - Task: $TASK_STATUS, Health: $TASK_DETAILS"
          if [ "$TASK_STATUS" != "RUNNING" ]; then
            echo "Task failed to stabilize. Checking logs and events..."
            LOG_STREAM=$(aws logs describe-log-streams --log-group-name /ecs/$ECS_SERVICE --query 'logStreams[0].logStreamName' --output text --no-cli-pager)
            if [ -n "$LOG_STREAM" ]; then
              aws logs get-log-events --log-group-name /ecs/$ECS_SERVICE --log-stream-name $LOG_STREAM --output text --no-cli-pager
            else
              echo "No log stream found. Check ECS task definition for logging configuration."
            fi
            aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $TASK_ARN --query 'tasks[0].containers[0].reason' --output text
            aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].events[0:5]' --output text
            exit 1
          fi