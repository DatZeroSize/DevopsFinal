name: DevopsFinal Actions

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  IMAGE_TAG: ${{ github.sha }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER: devops-cluster
  ECS_SERVICE: devopsfinal-task-service-qswqd4rl

jobs:
  test-and-sonarqube:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Cần thiết để SonarCloud phân tích lịch sử Git

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ secrets.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --no-restore --configuration Release

      - name: Run tests with coverage
        run: |
          dotnet test DevopsFinal.Tests/DevopsFinal.Tests.csproj \
            --configuration Release \
            --settings coverlet.runsettings \
            --verbosity normal

      - name: Move coverage report
        run: |
          # Tìm file coverage.opencover.xml trong thư mục con và di chuyển về TestResults
          find DevopsFinal.Tests/TestResults -type f -name "coverage.opencover.xml" -exec mv {} DevopsFinal.Tests/TestResults/coverage.opencover.xml \;
          ls -la DevopsFinal.Tests/TestResults/

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.cs.opencover.reportsPaths=DevopsFinal.Tests/TestResults/ba835b8a-8081-4f7b-a42a-57c78ad6d99a/coverage.opencover.xml
            -Dsonar.exclusions=**/DevopsFinal/wwwroot/**,**/obj/**,**/bin/**,**/Program.cs,**/Models/ErrorViewModel.cs
            -Dsonar.coverage.exclusions=**/DevopsFinal/wwwroot/**,**/obj/**,**/bin/**,**/Program.cs,**/Models/ErrorViewModel.cs

  build-and-push-docker:
    needs: test-and-sonarqube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create .env file for Docker build
        run: |
          if [ -z "${{ secrets.ASPNETCORE_ENVIRONMENT }}" ] || [ -z "${{ secrets.CONNECTION_STRINGS_DEFAULT }}" ]; then
            echo "Error: ASPNETCORE_ENVIRONMENT or CONNECTION_STRINGS_DEFAULT is not set in GitHub Secrets"
            exit 1
          fi
          echo "ASPNETCORE_ENVIRONMENT=${{ secrets.ASPNETCORE_ENVIRONMENT }}" > .env
          echo "ConnectionStrings__DefaultConnectionString=${{ secrets.CONNECTION_STRINGS_DEFAULT }}" >> .env
          cat .env  # Log file content for debugging

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Remove .env file
        if: always()
        run: rm -f .env

  deploy:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update ECS service
        run: aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment